from tasks.task_4.task4_1.main import *
from tasks.task_4.task_4_constants import *

# Task
# 1)Увеличить m в l раз
# (здесь l–параметр, натуральное число; запрашивать у пользователя, вводить с клавиатуры).

# 2)Вычислить приближённо и вывести на печать значения интеграла от ρ(x)∙f(x) по [A, B],
# посчитанные при помощи составных формул левых, правых, средних прямоугольников, трапеций и Симпсона
# с новым числом делений [A, B] ‒ m∙l. (Обозначим это новое значение за  J(h/l)).

# 3)Посчитать и вывести на печать абсолютную фактическую погрешность каждой формулы
# для случая нового числа промежутков разбиения m∙l.

# 4)Уточнить  значения  J(h)и J(h/l) по принципу Рунге для каждой СКФ.

# 5)Посчитать и вывести на печать абсолютные фактические погрешности для уточнённых значений.



# Parameters:
# 1)пределы интегрирования A, B(запрашивать у пользователя, вводить с клавиату-ры);

# 2)весовая функция  ρ(x)и функция f(x)
# (описать в коде  вес ρ(x)положить ≡1 и несколько вариантов для функции f(x),
# в частности, обязательно рассмотреть функции-многочлены: нулевой, первой и третьей степени);

# 3)m–число промежутков деления [A, B](запрашивать у пользователя, вводить с клавиатуры).



# Screen presentation:
# 1)название задачи;

# 2)A=  , B=  , m=   , значениеh=(B–A)/m;

# 3)J ‒ точное значение интеграла (находить вручную, через первообразнуюили с помощью матпакета);

# 4)далее, для каждой составной квадратурной формулы (далее СКФ) выводить:
# •значение J(h);
# •абсолютную фактическую погрешность │J− J(h)│;
# •теоретическую погрешность = Const∙(Md+1)∙(b-a)∙hd+1.
# Здесь d–АСТ СКФ, (Md+1)=max[a,b]│f'(d+1)(x)│,
# Const=1/2 для СКФ левых и правых, 1/12 для трапеций, 1/24 для средних и 1/2880 для СКФ Симпсона.



# Control forms:
# 1)Все составные КФ должны быть точны (погрешность 0или машинный 0) для f(x)=const,
# однако, наиболее важно проверить точность СКФ левых и правых прямоугольников при тестировании программы;

# 2)Оставшиеся составные КФ должны быть также точны для f(x)–многочленов первой степени,
# а КФ Симпсона точна для произвольного многочлена второй и третьей степени.



# Test:
# Протестировать программу для случая, когда искомое значение интеграладовольно велико
# (подобрать такие f(x)и [A, B]). «Поиграть»числом разбиений m(от 10 000 до 1 000 000).
# •Убедиться, что программа «не ломается».
# •Убедиться, что СКФ Симпсона при умеренном числе разбиений(1000, 10000)
# дает результат, более точный чемпри миллионе.
# •Подумать, с чем может быть связана потеря точности «у Симпсона»

if __name__ == "__main__":
    print_task_info()